#!/usr/bin/nft -f
# vim:set ts=2 sw=2 et:

# IPv4/IPv6 Simple & Safe firewall ruleset.
# More examples in /usr/share/nftables/ and /usr/share/doc/nftables/examples/.

table inet filter
delete table inet filter
table inet filter {
  chain base_checks {
    ct state invalid drop comment "early drop of invalid connections"
    ct state {established, related} accept comment "allow tracked connections"
  }

  chain input {
    type filter hook input priority filter; policy drop;
    jump base_checks
    iif lo accept comment "allow loopback"
    iif != lo ip daddr 127.0.0.1/8 drop comment "drop to loopback not coming from loopback"
    iif != lo ip6 daddr ::1/128 drop comment "drop to loopback not coming from loopback"
    ip protocol icmp accept comment "allow icmp"
    meta l4proto ipv6-icmp accept comment "allow icmp v6"
    tcp dport ssh accept comment "allow sshd"
    udp dport { llmnr, mdns } accept comment "allow link-local multicast name resolution"
    iifname wlan0 meta nfproto ipv6 udp dport dhcpv6-client accept comment "allow dhcpv6 replies"
    udp dport 10001 drop comment "ubiquiti access point noise"
    iifname ve-* udp dport bootps accept comment "allow nspawn veth dhcp"
#    log prefix "INPUT "
    pkttype host limit rate 5/second counter reject with icmpx type admin-prohibited
  }

  chain forward {
    type filter hook forward priority filter; policy drop;
    jump base_checks
    iifname docker0 oifname wlan0 accept comment "allow forwarding traffic"
    iifname ve-* oifname wlan0 accept comment "allow forwarding traffic"
#    log prefix "FORWARD "
  }
}

table ip io.docker.nat
delete table ip io.docker.nat
table ip io.docker.nat {
  set masq_saddr {
    type ipv4_addr
    flags interval
    elements = { 172.17.0.0/16 }
  }

  map map_port_ipport {
    type inet_proto . inet_service : ipv4_addr . inet_service
  }

  chain prerouting {
    type nat hook prerouting priority dstnat + 1; policy accept;
    fib daddr type local dnat ip to meta l4proto . th dport map @map_port_ipport
  }

  chain output {
    type nat hook output priority -99; policy accept;
    ip daddr != 127.0.0.0/8 oif "lo" dnat ip to meta l4proto . th dport map @map_port_ipport
  }

	chain postrouting {
		type nat hook postrouting priority srcnat + 1; policy accept;
		ip saddr @masq_saddr masquerade
	}
}

table ip6 io.docker.nat
delete table ip6 io.docker.nat
table ip6 io.docker.nat {
	set masq_saddr {
		type ipv6_addr
		flags interval
	}

	map map_port_ipport {
		type inet_proto . inet_service : ipv6_addr . inet_service
	}

	chain prerouting {
		type nat hook prerouting priority dstnat + 1; policy accept;
		fib daddr type local dnat ip6 to meta l4proto . th dport map @map_port_ipport
	}

	chain output {
		type nat hook output priority -99; policy accept;
		ip6 daddr != ::1 oif "lo" dnat ip6 to meta l4proto . th dport map @map_port_ipport
	}

	chain postrouting {
		type nat hook postrouting priority srcnat + 1; policy accept;
		ip6 saddr @masq_saddr masquerade
	}
}
